@using Core.DTO
@using H3PublisherApp.Dialog
@using H3PublisherApp.Services
@using MudBlazor
@using MudBlazor.Services
@inject IDialogService DialogService
@page "/counter"

@if (authors == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudGrid Spacing="6">
        @foreach (var author in authors)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Class="pa-4" Style="height: 100%;">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h6">
                            Author: @author.FirstName @author.LastName
                        </MudText>

                        <MudDivider />

                        <MudText Typo="Typo.body1">
                            Books written: @author.Books.Count()
                        </MudText>

                        @if (author.Books?.Any() == true)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-2" Style="align-self: start;" OnClick="@((e) => OpenAuthorBooksAsync(author.Books))">
                                View Books
                            </MudButton>
                        }
                        else
                        {
                            <MudText Class="text-muted mt-2">No books found.</MudText>
                        }
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-2" Style="align-self: start;" OnClick="@((e) => OpenAuthorBooksAsync(author.Books))">
                            Add book
                        </MudButton>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}



@code {
    private List<AuthorDTO> authors;
    private AuthorRepo _authorRepo = new();
    protected override async Task OnInitializedAsync()
    {
        var response = await _authorRepo.GetAuthors();
        authors = response;
    }
    private Task OpenAuthorBooksAsync(List<BookDTO> books)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Books", books }
        };
        return DialogService.ShowAsync<BooksDetails>("Simple Dialog", parameters, options);
    }

    private Task AddBookAsync(List<BookDTO> books)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Books", books }
        };
        return DialogService.ShowAsync<BooksDetails>("Simple Dialog", parameters, options);
    }
}