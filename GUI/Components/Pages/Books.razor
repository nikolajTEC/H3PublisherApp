@page "/books"
@inject BookRepo bookrepo
@inject NavigationManager Nav
@inject CustomAuthStateProvider AuthStateProvider
@using H3PublisherApp.Models
@using H3PublisherApp.Services
@using MudBlazor

<MudGrid>
    <MudItem xs="12" sm="4">
        <MudTextField @bind-Value="_name" Label="Search by Name" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudDateRangePicker @bind-DateRange="_dateRange" Label="Search by Date Range" />
    </MudItem>



    <MudItem xs="12" sm="2">
        <MudNumericField @bind-Value="_price" Label="Price" Variant="Variant.Outlined" />
    </MudItem>

    <MudItem xs="12" sm="2">
        <MudRadioGroup @bind-Value="under">
            <MudRadio Value="true">Under</MudRadio>
            <MudRadio Value="false">Over</MudRadio>
        </MudRadioGroup>
    </MudItem>

    <MudItem xs="12" class="d-flex justify-end mt-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PerformSearch">
            Search
        </MudButton>
    </MudItem>
    @foreach (var book in books)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Class="pa-4">
                @if (editingBookId == book.Id)
                {
                    <MudText Typo="Typo.h6">Edit Book</MudText>

                    <!-- Book Fields -->
                    <MudTextField @bind-Value="book.Title" Label="Title" Variant="Variant.Outlined" />
                    <MudDatePicker @bind-Date="bookDate" Label="Publish Date" />
                    <MudTextField @bind-Value="book.BasePrice" Label="Base Price" Variant="Variant.Outlined" />

                    <MudDivider Class="my-2" />

                    <!-- Cover Fields -->
                    <MudText Typo="Typo.subtitle1">Cover</MudText>

                    @if (book.Cover != null)
                    {
                        <MudTextField @bind-Value="book.Cover.Title" Label="Cover Title" Variant="Variant.Outlined" />
                        <MudCheckBox @bind-Value="book.Cover.DigitalOnly" Label="Digital Only" />
                        <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="() => RemoveCover(book)">Delete Cover</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => AddCover(book)">Add Cover</MudButton>
                    }

                    <MudDivider Class="my-2" />

                    <!-- Artists List -->
                    <MudText Typo="Typo.subtitle1">Artists</MudText>

                    @if (book.Cover?.Artists != null)
                    {
                        @foreach (var artist in book.Cover.Artists)
                        {
                            <MudPaper Class="pa-2 mb-2" Elevation="1">
                                <MudTextField @bind-Value="artist.FirstName" Label="First Name" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="artist.LastName" Label="Last Name" Variant="Variant.Outlined" />
                                <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="() => RemoveArtist(book, artist)">Remove Artist</MudButton>
                            </MudPaper>
                        }
                    }

                    @if (book.Cover != null)
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => AddArtist(book)">
                            Add Artist
                        </MudButton>
                    }

                    <MudDivider Class="my-2" />

                    <!-- Save / Cancel -->
                    <MudStack Row="true" Spacing="2">
                        <MudButton OnClick="() => SaveEdit(book)" Color="Color.Primary">Save</MudButton>
                        <MudButton OnClick="CancelEdit" Color="Color.Secondary">Cancel</MudButton>
                    </MudStack>
                }
                else
                {
                    <!-- Display Mode -->
                    <MudText Typo="Typo.h6">@book.Title</MudText>
                    <MudText>Price: @book.BasePrice</MudText>
                    <MudText>Published: @book.PublishDate</MudText>

                    @if (book.Cover != null)
                    {
                        <MudText>Cover: @book.Cover.Title</MudText>
                        <MudText>Digital: @(book.Cover.DigitalOnly ? "Yes" : "No")</MudText>

                        @if (book.Cover.Artists != null)
                        {
                            @foreach (var artist in book.Cover.Artists)
                            {
                                <MudText>Artist: @artist.FirstName @artist.LastName</MudText>
                            }
                        }
                    }

                    <MudButton OnClick="() => Edit(book)">Edit</MudButton>
                    <MudButton Color="Color.Error" OnClick="() => Delete(book.Id)">Delete</MudButton>
                }
            </MudPaper>
        </MudItem>
    }
</MudGrid>

<MudButton Class="mt-4" OnClick="@GoBack">Back</MudButton>

@code {
    private List<Book> books = new();
    private int? editingBookId;
    private DateTime? bookDate;


    private string? _name;
    private DateRange _dateRange = new();
    private double? _price;
    private bool under = true;
    private bool over = false;
    private async Task PerformSearch()
    {
        books = await bookrepo.GetBooksBySearchCriterias(_name, _dateRange, _price, under);
    }

    protected override async Task OnInitializedAsync()
    {
        books = await bookrepo.GetBooksAsync();
    }

    private void Edit(Book book)
    {
        editingBookId = book.Id;
        bookDate = book.PublishDate?.ToDateTime(new TimeOnly(0));
        // Ensure collections are initialized
        book.Cover ??= new Cover { Artists = new List<Artist>() };
        book.Cover.Artists ??= new List<Artist>();
    }

    private void CancelEdit()
    {
        editingBookId = null;
    }

    private async Task SaveEdit(Book book)
    {
        book.PublishDate = bookDate.HasValue ? DateOnly.FromDateTime(bookDate.Value) : null;
        await bookrepo.UpdateBookAsync(book);
        editingBookId = null;
        books = await bookrepo.GetBooksAsync(); // Refresh
    }

    private void AddCover(Book book)
    {
        book.Cover = new Cover
            {
                Title = "",
                DigitalOnly = false,
                Artists = new List<Artist>()
            };
    }

    private void RemoveCover(Book book)
    {
        book.Cover = null;
    }

    private void AddArtist(Book book)
    {
        book.Cover.Artists ??= new List<Artist>();
        book.Cover.Artists.Add(new Artist());
    }

    private void RemoveArtist(Book book, Artist artist)
    {
        book.Cover.Artists.Remove(artist);
    }

    private async Task Delete(int bookId)
    {
        await bookrepo.DeleteBookAsync(bookId);
        books = await bookrepo.GetBooksAsync();
    }

    private void GoBack() => Nav.NavigateTo("/counter");
}
