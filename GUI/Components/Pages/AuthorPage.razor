@using H3PublisherApp.Dialog
@using H3PublisherApp.Models
@using H3PublisherApp.Services
@using MudBlazor
@using MudBlazor.Services
@inject CustomAuthStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject IDialogService DialogService
@page "/authorPage"



@if (authors == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudGrid Spacing="6">
        @if (isAuthenticated)
        {
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           Class="mt-2"
                           Style="align-self: start;"
                           OnClick="AddAuthorAsync">
                    Add author
                </MudButton>
            </MudItem>
        }
        @foreach (var author in authors)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Class="pa-4" Style="height: 100%;">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h6">
                            Author: @author.FirstName @author.LastName
                        </MudText>

                        <MudDivider />

                        <MudText Typo="Typo.body1">
                            Books written: @author.Books.Count()
                        </MudText>

                        @if (author.Books?.Any() == true)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-2" Style="align-self: start;" OnClick="@((e) => ViewBookPage(author.Id))">
                                View BooksPage
                            </MudButton>
                        }
                        else
                        {
                            <MudText Class="text-muted mt-2">No books found.</MudText>
                        }
                        @if (isAuthenticated)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-2" Style="align-self: start;" OnClick="@((e) => AddBookAsync(author))">
                                Add book
                            </MudButton>
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}



@code {
    private List<Author> authors;
    private AuthorRepo _authorRepo = new();

    private bool isAuthenticated = false;
    private bool hasCheckedAuth = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            hasCheckedAuth = true;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await _authorRepo.GetAuthors();
        authors = response;
    }
    private Task OpenAuthorBooksAsync(List<Book> books)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Books", books }
        };
        return DialogService.ShowAsync<BooksDetails>("Simple Dialog", parameters, options);
    }

    private Task AddBookAsync(Author author)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Author", author }
        };
        return DialogService.ShowAsync<AddBookDialog>("Simple Dialog", parameters, options);
    }
    private async Task AddAuthorAsync()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        await DialogService.ShowAsync<AddAuthor>("Add Name", parameters, options);
        authors = await _authorRepo.GetAuthors();
        StateHasChanged();
    }

    private void ViewBookPage(int authorId)
    {
        Nav.NavigateTo($"/books/{authorId}");
    }
}